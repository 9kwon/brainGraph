% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_rand_graph_par.R
\name{sim.rand.graph.par}
\alias{sim.rand.graph.par}
\title{Simulate N random graphs w/ same clustering and degree sequence as the input.}
\usage{
sim.rand.graph.par(g, N, clustering = FALSE, ...)
}
\arguments{
\item{g}{An \code{igraph} graph object}

\item{N}{Integer; the number of random graphs to simulate}

\item{clustering}{Logical; whether or not to control for clustering (default:
\code{FALSE})}

\item{...}{Other parameters (passed to \code{\link{sim.rand.graph.clust}})}
}
\value{
A \emph{list} of \emph{N} random graphs with vertex and graph
  attributes
}
\description{
Simulates \code{N} simple random graphs with the same clustering (optional)
and degree sequence as the input. Essentially a wrapper for
\code{\link[igraph]{sample_degseq}} (or \code{\link{sim.rand.graph.clust}})
and \code{\link{set_brainGraph_attr}}. It uses \code{\link[foreach]{foreach}}
for parallel processing.
}
\details{
If you do not want to match by clustering, then simple rewiring of the input
graph is performed (the number of rewire's equaling the larger of \code{1e4}
and \eqn{10 \times m}, where \eqn{m} is the graph's edge count).
}
\examples{
\dontrun{
rand1 <- sim.rand.graph.par(g[[1]][[N]], N=1e3)
rand1.cl <- sim.rand.graph.par(g[[1]][[N]], N=1e2,
  clustering=T, max.iters=1e3)
}
}
\seealso{
\code{\link[igraph]{rewire}, \link[igraph]{sample_degseq},
  \link[igraph]{keeping_degseq}}

Other Null graph functions: \code{\link{analysis_random_graphs}},
  \code{\link{choose.edges}}, \code{\link{rich_club_norm}},
  \code{\link{sim.rand.graph.clust}}
}
\author{
Christopher G. Watson, \email{cgwatson@bu.edu}
}
